#! /usr/bin/env python3

'''
Plot coronavirus data
'''

import os
import sys
import subprocess
import datetime
import csv
import argparse
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import yaml

def mkplot(cfg, dates, data):
    '''
    Make plot
    '''

    fig, axs = plt.subplots(1, 2, figsize=(16, 9))
    for axes, plot in zip(axs, ('plot', 'semilogy')):
        for country in data:
            getattr(axes, plot)(dates, data[country], label=country)
        axes.grid(which='major')
        axes.grid(which='minor', linewidth=.5)
        axes.xaxis.set_major_locator(mdates.WeekdayLocator())
        axes.xaxis.set_minor_locator(mdates.DayLocator())
        axes.xaxis.set_major_formatter(mdates.DateFormatter(cfg['dateformat']))
        axes.legend()
    fig.autofmt_xdate()

    res = cfg['resolution'] if 'resolution' in cfg else None
    plt.savefig(os.path.expanduser(cfg['out']), dpi=res, bbox_inches='tight')

def main():
    '''
    Run
    '''

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-l', '--local', action='store_true',
                        help="don't git pull")
    args = parser.parse_args()

    # Load config
    path = os.path.expanduser('~/.corona')
    with open(f'{path}/corona.yaml') as fhl:
        cfg = yaml.load(fhl)
    directory = os.path.basename(cfg['repository'])

    # Update data
    if not os.path.lexists(f'{path}/{directory}'):
        subprocess.check_call(['git', 'clone', cfg['repository']], cwd=path)
    elif not args.local:
        subprocess.check_call(['git', 'pull'], cwd=f"{path}/{directory}")

    # Load data
    countries = set(cfg['countries'])
    data = {}
    first = True
    with open(f"{path}/{directory}/{cfg['file']}") as fhl:
        for line in csv.reader(fhl):
            if first:
                dates = [datetime.datetime.strptime(day, '%m/%d/%y')
                         for day in line[4:]]
                first = False
            elif line[1] in countries:
                if line[1] in data:
                    data[line[1]] = [int(old) + int(new)
                                     for old, new
                                     in zip(data[line[1]], line[4:])]
                else:
                    data[line[1]] = line[4:]

    # Plot
    mkplot(cfg, dates, data)

if __name__ == '__main__':
    sys.exit(main())
